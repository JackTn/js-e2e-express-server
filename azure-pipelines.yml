# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

parameters:
- name: age
  type: number
  default: 1888888
- name: myStep
  type: step
  default:
    script: echo my step
- name: mySteplist
  type: stepList
  default:
    - script: echo step one
    - script: echo step two
- name: listOfStrings
  type: object
  default:
  - one
  - two
- name: listOfFruits
  type: object
  default:
  - fruitName: 'apple'
    colors: ['red','green']
  - fruitName: 'lemon'
    colors: ['yellow']
- name: myJobList
  type: jobList
  default: 
    - job: job1
      steps:
        - script: echo joblist job 1
    - job: job2
      steps:
        - script: echo joblist job 2
    - job: job3
      steps:
        - script: echo joblist job 3
- name: myStageList
  type: stageList
  default: 
    - stage: stageList1
      jobs:
      - job: stageList1Job
        steps:
        - script: echo stageList1Job
    - stage: stageList2
      jobs:
      - job: stageList2Job
        steps:
        - script: echo stageList2Job
    - stage: stageList3
      jobs:
      - job: stageList3Job
        steps:
        - script: echo stageList3Job

variables:
- name: age
  value: 133333
- group: my-variable-group-1
- name: my-variable-myhello
  value: $[variables.myhello]
- name: foo
  value: a,b,c,d

trigger:
- main

# trigger: none

stages:
- stage: VSBuildStage
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: VSBuildJob
    steps:
    - ${{ parameters.myStep }}

    - ${{ each value in parameters.listOfStrings }}:
      - script: echo ${{ value }}
        displayName: 'loop parameters.listOfStrings'

    - ${{ each fruit in parameters.listOfFruits }}:
      - ${{ each fruitColor in fruit.colors}} :
        - script: echo ${{ fruit.fruitName}} ${{ fruitColor }}
          displayName: 'loop parameters.listOfFruits'

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    - script: |
        echo building $(Build.BuildNumber) with ${{ parameters.age }}
      displayName: 'test script 1'

    - task: PowerShell@2
      displayName: 'test script 2'
      inputs:
        targetType: 'inline'
        script: 'Write-Host ${{ parameters.age }}'

    - task: PowerShell@2
      displayName: 'test script 3'
      inputs:
        targetType: 'inline'
        script: 'Write-Host $env:NAME'

    - task: Bash@3
      displayName: 'test Bash 4'
      inputs:
        targetType: 'inline'
        script: 'echo $(name)'

    - task: Bash@3
      displayName: 'test Bash 5'
      inputs:
        targetType: 'inline'
        script: 'echo ${{ parameters.age }}'

    - task: Bash@3
      displayName: 'test Bash 6'
      inputs:
        targetType: 'inline'
        script: 'echo ${{ variables.age }}'

    - script: echo $(age)
    - script: echo $(myhello)
    - script: echo $(my-variable-myhello)

    - ${{ each x in split(variables.foo, ',') }}:
      - script: echo ${{ x }}

    - ${{ each e in split($(LISTPARAMTER), ',') }}:
      - script: echo ${{ e }}
    
    - powershell: |
        $b = "$(listParamter)".Split(",")
        $b[0]
        $b[1]
        $b[2]
        $b[3]
        $b[4]
      displayName: 'PowerShell Script'
    
    - task: PowerShell@2
      displayName: Loop Over Records
      inputs:
        targetType: 'inline'
        script: |
          ForEach ($p in $(listParamter).Split(",")) {
            Write-Host $p
          }

  - job: stepList
    steps: ${{ parameters.mySteplist }}

  - job: myStep
    steps:
      - ${{ parameters.myStep }}

  - ${{ parameters.myJobList}}

- ${{ parameters.myStageList }}